apiVersion: v1
kind: ConfigMap
metadata:
  name: kingsinns-config-11038fd6
  namespace: default
data:
  # Database connection strings
  DefaultConnection: "Data Source=62.171.156.247;Initial Catalog=11038fd6kingsinns;User ID=sa;Password=123@Teams;TrustServerCertificate=true;"
  
  # Identity Server configuration
  IdentityServer__IssuerUri: "http://11038fd6-kingsinns-ids.deeplyblue.space"
  
  # Service URLs for Web application
  IdentitySettings__Authority: "http://11038fd6-kingsinns-ids.deeplyblue.space/"
  IdentitySettings__ClientId: "kingsinns_web"
  IdentitySettings__ClientSecret: "secret"
  IdentitySettings__TokenEndpoint: "http://11038fd6-kingsinns-ids.deeplyblue.space/connect/token"
  IdentitySettings__UserInformationEndpoint: "http://11038fd6-kingsinns-ids.deeplyblue.space/connect/userinfo"
  IdentitySettings__AuthorizationEndpoint: "http://11038fd6-kingsinns-ids.deeplyblue.space/connect/authorize"
  IdentitySettings__SelfUrl: "http://11038fd6-kingsinns-dining-web.deeplyblue.space/"
  IdentitySettings__MetadataAddress: "http://11038fd6-kingsinns-ids.deeplyblue.space/.well-known/openid-configuration"
  IdentitySettings__ApiUrl: "http://11038fd6-kingsinns-dining-host.deeplyblue.space/"
  
  # API Settings
  ApiSettings__BaseUrl: "http://11038fd6-kingsinns-dining-host.deeplyblue.space/"
  
  # Email settings (placeholder)
  SendGridSettings__ApiKey: "your-sendgrid-api-key"
  SendGridSettings__FromEmail: "noreply@kingsinns.ie"
  SendGridSettings__FromName: "Kings Inns Dining"
  
  # Stripe settings (placeholder)
  Stripe__PublishableKey: "pk_test_placeholder"
  Stripe__SecretKey: "sk_test_placeholder"
  
  # Startup script for main initialization
  startup.sh: |
    #!/bin/bash
    
    # Create command queue directory structure
    sudo mkdir -p /home/coder/workspace/command-queue
    sudo mkdir -p /home/coder/workspace/command-queue/startup
    sudo mkdir -p /home/coder/workspace/command-queue/migration
    sudo mkdir -p /home/coder/workspace/command-queue/build
    sudo mkdir -p /home/coder/workspace/command-queue/logs
    
    # Create project-specific startup commands
    echo "Starting KingsInns Dining System terminal sessions..."
    
    # Wait for workspace to be ready
    sleep 10
    
    # Start migration setup first
    sudo screen -dmS "migration-setup" bash -c "/startup/migration-setup.sh; exec bash"
    sleep 5
    
    # Start Identity Server
    sudo screen -dmS "kingsinns-ids" bash -c "/startup/startup-kingsinns-ids.sh; exec bash"
    sleep 3
    
    # Start API Host
    sudo screen -dmS "kingsinns-dining-host" bash -c "/startup/startup-kingsinns-dining-host.sh; exec bash"
    sleep 3
    
    # Start Web UI
    sudo screen -dmS "kingsinns-dining-web" bash -c "/startup/startup-kingsinns-dining-web.sh; exec bash"
    sleep 3
    
    # Start command monitor
    sudo nohup /home/coder/workspace/command-monitor.sh > /home/coder/workspace/command-queue/logs/monitor.log 2>&1 &
    
    echo "All KingsInns Dining System terminal sessions started"
    echo "Access URLs:"
    echo "- Code Server: http://11038fd6-code.deeplyblue.space"
    echo "- Identity Server: http://11038fd6-kingsinns-ids.deeplyblue.space"
    echo "- API: http://11038fd6-kingsinns-dining-host.deeplyblue.space"
    echo "- Web UI: http://11038fd6-kingsinns-dining-web.deeplyblue.space"

  # Migration setup script
  migration-setup.sh: |
    #!/bin/bash
    cd /home/coder/workspace/code-space
    
    echo "=== Running Database Migrations for KingsInns Dining System ==="
    echo "Database: 11038fd6kingsinns"
    echo "Server: 62.171.156.247"
    echo ""
    
    # Set connection string
    export ConnectionStrings__DefaultConnection="Data Source=62.171.156.247;Initial Catalog=11038fd6kingsinns;User ID=sa;Password=123@Teams;TrustServerCertificate=true;"
    
    # Run migrations for main application
    echo "Running migrations for KingsInns.Dining.Domain..."
    cd /home/coder/workspace/code-space/KingsInns.Dining.Host
    dotnet ef database update --verbose --context ApplicationDbContext
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Application database migrations completed successfully"
    else
        echo "‚ùå Application database migrations failed"
    fi
    echo ""
    
    # Run migrations for Identity Server
    echo "Running migrations for KingsInns.IDS..."
    cd /home/coder/workspace/code-space/KingsInns.IDS
    
    # Configuration DB migrations
    dotnet ef database update --verbose --context ConfigurationDbContext
    if [ $? -eq 0 ]; then
        echo "‚úÖ Identity Server Configuration DB migrations completed"
    else
        echo "‚ùå Identity Server Configuration DB migrations failed"
    fi
    
    # Persisted Grant DB migrations
    dotnet ef database update --verbose --context PersistedGrantDbContext
    if [ $? -eq 0 ]; then
        echo "‚úÖ Identity Server Persisted Grant DB migrations completed"
    else
        echo "‚ùå Identity Server Persisted Grant DB migrations failed"
    fi
    
    # Application DB migrations for Identity
    dotnet ef database update --verbose --context ApplicationDbContext
    if [ $? -eq 0 ]; then
        echo "‚úÖ Identity Server Application DB migrations completed"
    else
        echo "‚ùå Identity Server Application DB migrations failed"
    fi
    
    echo ""
    echo "=== All database migrations completed ==="
    echo "You can now start the applications"

  # Identity Server startup script
  startup-kingsinns-ids.sh: |
    #!/bin/bash
    cd /home/coder/workspace/code-space/KingsInns.IDS
    
    echo "=== Starting KingsInns Identity Server ==="
    echo "Project Type: Duende Identity Server"
    echo "Port: 5000"
    echo "URL: http://11038fd6-kingsinns-ids.deeplyblue.space"
    echo ""
    
    # Set environment variables
    export ConnectionStrings__DefaultConnection="Data Source=62.171.156.247;Initial Catalog=11038fd6kingsinns;User ID=sa;Password=123@Teams;TrustServerCertificate=true;"
    export IdentityServer__IssuerUri="http://11038fd6-kingsinns-ids.deeplyblue.space"
    export ASPNETCORE_ENVIRONMENT="Development"
    
    # Build the project first
    echo "Building Identity Server..."
    dotnet build
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Build successful. Starting Identity Server..."
        echo "üîê Identity Server will be available at: http://11038fd6-kingsinns-ids.deeplyblue.space"
        echo ""
        
        # Run the application
        dotnet run --urls "http://0.0.0.0:5000"
    else
        echo "‚ùå Build failed. Please check the errors above."
        echo "You can run 'dotnet build' manually to see detailed errors."
    fi

  # API Host startup script
  startup-kingsinns-dining-host.sh: |
    #!/bin/bash
    cd /home/coder/workspace/code-space/KingsInns.Dining.Host
    
    echo "=== Starting KingsInns Dining API Host ==="
    echo "Project Type: ASP.NET Core Web API"
    echo "Port: 5001"
    echo "URL: http://11038fd6-kingsinns-dining-host.deeplyblue.space"
    echo ""
    
    # Set environment variables
    export ConnectionStrings__DefaultConnection="Data Source=62.171.156.247;Initial Catalog=11038fd6kingsinns;User ID=sa;Password=123@Teams;TrustServerCertificate=true;"
    export IdentityServer__IssuerUri="http://11038fd6-kingsinns-ids.deeplyblue.space"
    export ASPNETCORE_ENVIRONMENT="Development"
    
    # Build the project first
    echo "Building API Host..."
    dotnet build
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Build successful. Starting API Host..."
        echo "üåê API will be available at: http://11038fd6-kingsinns-dining-host.deeplyblue.space"
        echo "üìö Swagger UI: http://11038fd6-kingsinns-dining-host.deeplyblue.space/swagger"
        echo ""
        
        # Run the application
        dotnet run --urls "http://0.0.0.0:5001"
    else
        echo "‚ùå Build failed. Please check the errors above."
        echo "You can run 'dotnet build' manually to see detailed errors."
    fi

  # Web UI startup script
  startup-kingsinns-dining-web.sh: |
    #!/bin/bash
    cd /home/coder/workspace/code-space/KingsInns.Dining.Web
    
    echo "=== Starting KingsInns Dining Web UI ==="
    echo "Project Type: Blazor Server Application"
    echo "Port: 3000"
    echo "URL: http://11038fd6-kingsinns-dining-web.deeplyblue.space"
    echo ""
    
    # Set environment variables
    export IdentitySettings__Authority="http://11038fd6-kingsinns-ids.deeplyblue.space/"
    export IdentitySettings__ClientId="kingsinns_web"
    export IdentitySettings__ClientSecret="secret"
    export IdentitySettings__SelfUrl="http://11038fd6-kingsinns-dining-web.deeplyblue.space/"
    export ApiSettings__BaseUrl="http://11038fd6-kingsinns-dining-host.deeplyblue.space/"
    export ASPNETCORE_ENVIRONMENT="Development"
    
    # Build the project first
    echo "Building Web UI..."
    dotnet build
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Build successful. Starting Web UI..."
        echo "üé® Web application will be available at: http://11038fd6-kingsinns-dining-web.deeplyblue.space"
        echo ""
        
        # Run the application
        dotnet run --urls "http://0.0.0.0:3000"
    else
        echo "‚ùå Build failed. Please check the errors above."
        echo "You can run 'dotnet build' manually to see detailed errors."
    fi

  # Command monitor script
  command-monitor.sh: |
    #!/bin/bash
    
    echo "Starting command queue monitor..."
    
    while true; do
        # Check for startup commands
        if [ -f /home/coder/workspace/command-queue/startup/restart-all ]; then
            echo "Restart all command received"
            sudo screen -S "kingsinns-ids" -X quit
            sudo screen -S "kingsinns-dining-host" -X quit
            sudo screen -S "kingsinns-dining-web" -X quit
            sleep 2
            sudo screen -dmS "kingsinns-ids" bash -c "/startup/startup-kingsinns-ids.sh; exec bash"
            sudo screen -dmS "kingsinns-dining-host" bash -c "/startup/startup-kingsinns-dining-host.sh; exec bash"
            sudo screen -dmS "kingsinns-dining-web" bash -c "/startup/startup-kingsinns-dining-web.sh; exec bash"
            rm /home/coder/workspace/command-queue/startup/restart-all
        fi
        
        # Check for build commands
        if [ -f /home/coder/workspace/command-queue/build/rebuild-all ]; then
            echo "Rebuild all command received"
            cd /home/coder/workspace/code-space
            dotnet build
            rm /home/coder/workspace/command-queue/build/rebuild-all
        fi
        
        sleep 5
    done

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kingsinns-codeserver-11038fd6
  namespace: default
  labels:
    app: kingsinns-codeserver-11038fd6
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kingsinns-codeserver-11038fd6
  template:
    metadata:
      labels:
        app: kingsinns-codeserver-11038fd6
    spec:
      containers:
      - name: codeserver
        image: jeremykinyua/code-server:dotnet8
        ports:
        - containerPort: 8080
          name: codeserver
        - containerPort: 3000
          name: web-ui
        - containerPort: 5000
          name: identity
        - containerPort: 5001
          name: api
        env:
        - name: PASSWORD
          value: "password123"
        - name: SUDO_PASSWORD
          value: "password123"
        volumeMounts:
        - name: workspace
          mountPath: /home/coder/workspace/code-space
        - name: startup-scripts
          mountPath: /startup
        - name: command-monitor
          mountPath: /home/coder/workspace/command-monitor.sh
          subPath: command-monitor.sh
        command: ["/bin/bash"]
        args: 
        - -c
        - |
          # Make scripts executable
          chmod +x /startup/*.sh
          chmod +x /home/coder/workspace/command-monitor.sh
          
          # Start code-server in background
          /usr/bin/entrypoint.sh --bind-addr 0.0.0.0:8080 /home/coder/workspace/code-space &
          
          # Wait for code-server to start
          sleep 15
          
          # Run startup script
          /startup/startup.sh
          
          # Keep container running
          tail -f /dev/null
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
      volumes:
      - name: workspace
        emptyDir: {}
      - name: startup-scripts
        configMap:
          name: kingsinns-config-11038fd6
          defaultMode: 0755
          items:
          - key: startup.sh
            path: startup.sh
          - key: migration-setup.sh
            path: migration-setup.sh
          - key: startup-kingsinns-ids.sh
            path: startup-kingsinns-ids.sh
          - key: startup-kingsinns-dining-host.sh
            path: startup-kingsinns-dining-host.sh
          - key: startup-kingsinns-dining-web.sh
            path: startup-kingsinns-dining-web.sh
      - name: command-monitor
        configMap:
          name: kingsinns-config-11038fd6
          defaultMode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: kingsinns-codeserver-service-11038fd6
  namespace: default
spec:
  selector:
    app: kingsinns-codeserver-11038fd6
  ports:
  - name: codeserver
    port: 8080
    targetPort: 8080
  - name: web-ui
    port: 3000
    targetPort: 3000
  - name: identity
    port: 5000
    targetPort: 5000
  - name: api
    port: 5001
    targetPort: 5001
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kingsinns-ingress-11038fd6
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  rules:
  # Code-server access
  - host: 11038fd6-code.deeplyblue.space
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kingsinns-codeserver-service-11038fd6
            port:
              number: 8080
  
  # Identity Server
  - host: 11038fd6-kingsinns-ids.deeplyblue.space
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kingsinns-codeserver-service-11038fd6
            port:
              number: 5000
  
  # API Host
  - host: 11038fd6-kingsinns-dining-host.deeplyblue.space
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kingsinns-codeserver-service-11038fd6
            port:
              number: 5001
  
  # Web UI
  - host: 11038fd6-kingsinns-dining-web.deeplyblue.space
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kingsinns-codeserver-service-11038fd6
            port:
              number: 3000